--- not autograded ---

Part 1
    blocksize = 20, n = 100:
Testing naive transpose: 0.011 milliseconds
Testing transpose with blocking: 0.116 milliseconds
 
    blocksize = 20, n = 1000: 
Testing naive transpose: 1.153 milliseconds
Testing transpose with blocking: 0.602 milliseconds

    blocksize = 20, n = 2000: 
Testing naive transpose: 2.338 milliseconds
Testing transpose with blocking: 2.507 milliseconds

    blocksize = 20, n = 5000: 
Testing naive transpose: 79.78 milliseconds
Testing transpose with blocking: 20.888 milliseconds

    blocksize = 20, n = 10000: 
Testing naive transpose: 468.332 milliseconds
Testing transpose with blocking: 88.503 milliseconds

    Checkoff Question 1: 1000
    Checkoff Question 2:
        1. compiler & system will optimize the code maybe?
        2. there's cost in the 2 more for loop(bounder check and index adding...)

Part 2
    blocksize = 50, n = 10000:
Testing naive transpose: 402.497 milliseconds
Testing transpose with blocking: 79.491 milliseconds

    blocksize = 100, n = 10000:
Testing naive transpose: 399.943 milliseconds
Testing transpose with blocking: 84.148 milliseconds

    blocksize = 500, n = 10000:
Testing naive transpose: 347.959 milliseconds
Testing transpose with blocking: 79.135 milliseconds

    blocksize = 1000, n = 10000:
Testing naive transpose: 352.253 milliseconds
Testing transpose with blocking: 71.07 milliseconds

    blocksize = 5000, n = 10000:
Testing naive transpose: 423.08 milliseconds
Testing transpose with blocking: 356.122 milliseconds

    Checkoff Question 3: 
--------------------------
           ┌────────────────────────────────────────┐
    433.64 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠄⠀│ 
           │⠀⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠢⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠒⠉⠀⠀⠀│ 
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠒⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠊⠁⠀⠀⠀⠀⠀⠀│ naive transpose
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠑⠒⠒⠒⠒⠒⠒⠒⠒⠒⠊⠀⠀⠀⠀⠀⠀⠀⠀⡔⠀│ with blocking
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠁⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠁⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀│
   60.5097 │⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠒⠒⠒⠒⠒⠒⠒⠢⠤⠜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           └────────────────────────────────────────┘
             50  100        500      1000      5000

when the blocksize increses, 
first performance increse, while utilizing the cache of the row in 'src',
but the access in another matrix 'dst' didn't utilize cache will.

